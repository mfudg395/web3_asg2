{"version":3,"sources":["components/HomeBrowser.js","components/PlayCard.js","components/PlayList.js","components/PlayBrowser.js","components/PlayFilter.js","components/FavoriteItem.js","components/FavoriteBar.js","components/PlayGeneralInfo.js","components/PlayCharacter.js","components/PlaySpeech.js","components/PlayScene.js","components/PlayAct.js","components/PlayText.js","components/Tab.js","components/Tabs.js","components/PlayDetailTabs.js","components/PlayTextSearch.js","components/PlayDetails.js","assets/images/logo.png","components/Profile.js","components/About.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["HomeBrowser","props","useState","input","setInput","className","CSSTransition","classNames","timeout","enter","exit","appear","in","htmlFor","id","type","placeholder","onInput","e","target","value","to","onClick","searchPlays","searchAllPlays","PlayCard","src","play","title","replace","alt","size","likelyDate","favoritePlay","filename","viewPlay","PlayList","plays","map","p","favState","PlayBrowser","isEmpty","sortPlays","PlayFilter","filterTitle","updateFilterTitle","filterBeforeYear","updateFilterBeforeYear","filterAfterYear","updateFilterAfterYear","filterGenre","updateFilterGenre","handleChange","currentTarget","name","labelCol","span","wrapperCol","layout","Item","label","onChange","defaultValue","Option","class","isNaN","alert","filterPlays","FavoriteItem","removePlay","FavoriteBar","showFavs","favPlays","length","PlayGeneralInfo","synopsis","PlayCharacter","character","desc","playSpeech","speech","speaker","lines","line","searchWords","textToHighlight","PlayScene","speakerSpeeches","scene","speeches","filter","stageDirection","sp","PlaySpeech","PlayAct","act","scenes","textSelection","char","undefined","PlayText","text","acts","Tab","toLowerCase","setTextTabSelected","this","activeTab","Component","Tabs","onClickTabItem","tab","setState","state","children","child","PlayDetailTabs","hasPlayInfo","genre","href","wiki","gutenberg","shakespeareOrg","playInfo","playText","persona","c","player","PlayTextSearch","handleOnChange","currSelection","cloneDeep","console","log","setTextSelection","for","find","s","setSearchWords","split","PlayDetails","setPlayInfo","setHasPlayInfo","textTabSelected","useEffect","getData","a","localStorage","getItem","url","fetch","response","json","data","setItem","JSON","stringify","parse","Profile","currentProfile","picture","large","details","firstname","lastname","city","country","Date","membership","date_joined","toDateString","About","Header","aboutVisible","setAboutVisible","profileVisible","setProfileVisible","setCurrentProfile","apiUrl","apiResponse","userData","Logo","placement","closable","visible","onClose","footer","centered","maskClosable","width","onCancel","Modal","setAppElement","document","querySelector","App","setPlays","isLoading","setIsLoading","sort","b","playResults","setPlayResults","query","showDetails","setShowDetails","results","includes","playsCopy","favoritePlays","setFavoritePlays","addFavorite","favPlay","dupe","forEach","isDuplicate","concat","removeFavorite","newFavorites","index","indexOf","splice","setShowFavs","toggleDisplay","beforeYear","afterYear","currentPlay","setCurrentPlay","Panel","Collapse","path","exact","render","accordion","defaultActiveKey","header","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","basename","process","getElementById"],"mappings":"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","file":"static/js/main.09927646.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport '../assets/css/HomeBrowser.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\n/**\r\n * The HomeBrowser is the box on the homepage that allows the user to search for plays\r\n * upon first loading the website. \r\n */\r\nconst HomeBrowser = function (props) {\r\n\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    const handleSearch = () => props.searchPlays(input);\r\n\r\n    const handleSearchAll = () => props.searchAllPlays();\r\n\r\n    return (\r\n        <div className=\"home-page\">\r\n            <CSSTransition\r\n                classNames=\"home-animation\"\r\n                timeout={{ enter: 500, exit: 300, appear: 1000 }}\r\n                appear={true}\r\n                enter={false}\r\n                exit={false}\r\n                in={true}>\r\n                <div className=\"HomeBrowserContainer\">\r\n                    <label htmlFor=\"title-input\" id=\"title-label\">Title</label>\r\n                    <input type=\"text\" id=\"title-input\" placeholder=\"Search plays\" onInput={e => setInput(e.target.value)}></input>\r\n                    <div className=\"line-break\"></div>\r\n                    <Link to='/browse'>\r\n                        <button onClick={handleSearch} id=\"matching-plays-button\" className=\"search-button\">Search Matching Plays</button>\r\n                        <button onClick={handleSearchAll} id=\"all-plays-button\" className=\"search-button\" >Search All Plays</button>\r\n                    </Link>\r\n                    <div className=\"line-break\"></div>\r\n                    {/* https://unsplash.com/photos/YLSwjSy7stw */}\r\n                    <div>Hero image credit: Alfons Morales, unsplash.com</div>\r\n                </div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\nexport default HomeBrowser;","import { Button, Card } from 'antd';\r\nimport React from 'react';\r\n\r\nconst PlayCard = (props) => {\r\n\r\n    const handleFavoriteClick = () => {\r\n        props.favoritePlay(props.play.id);\r\n    }\r\n\r\n    const handleViewClick = () => {\r\n        props.viewPlay(props.play.id);\r\n    }\r\n\r\n    // on Randy's suggestion, taken from https://placeholder.com/\r\n    const src = `https://via.placeholder.com/300.png/?text=${props.play.title.replace(/\\s/g, '+')}`\r\n\r\n    return (\r\n        <Card title={<img src={src} alt={props.play.title} className=\"play-card-image\" />} size=\"small\">\r\n            <p>{props.play.title}<br />({props.play.likelyDate})</p>\r\n            <button className=\"favorite-button\" onClick={handleFavoriteClick}>❤️</button>\r\n            {props.play.filename != \"\" ? <span className=\"has-text-icon\">📙</span> : null}\r\n            <Button type=\"primary\" className=\"view-button\" onClick={handleViewClick}>View</Button>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default PlayCard;","import { Button, Space } from 'antd';\r\nimport _ from 'lodash';\r\nimport React from 'react';\r\nimport PlayCard from './PlayCard';\r\n\r\nconst PlayList = (props) => {\r\n\r\n    const handleSort = (e) => {\r\n        if (e.currentTarget.name == \"title\") {\r\n            props.sortPlays(\"title\");\r\n        } else {\r\n            props.sortPlays(\"year\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"black-border\">\r\n            <div className=\"plays-list grid-item\">\r\n                {props.plays.map(p => <PlayCard play={p} key={p.id} favoritePlay={props.favoritePlay} viewPlay={props.viewPlay} favState={props.favState}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayList;","import { isEmpty } from 'lodash';\r\nimport React from 'react';\r\n// import HomeBrowser from \"./HomeBrowser.js\";\r\nimport PlayList from './PlayList.js';\r\n\r\nconst PlayBrowser = (props) => {\r\n    return (\r\n        <div className={props.favState ? \"playBrowser\" : \"playBrowser playBrowser-fav-hidden\"}>\r\n            {!isEmpty(props.plays) ? <PlayList plays={props.plays} sortPlays={props.sortPlays} favoritePlay={props.favoritePlay} viewPlay={props.viewPlay} favState={props.favState} /> : <div className=\"grid-item plays-list black-border\">No plays found.</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayBrowser;","import React, { useState } from 'react';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Select\r\n} from 'antd';\r\n\r\nconst PlayFilter = (props) => {\r\n\r\n    const [filterTitle, updateFilterTitle] = useState(\"\");\r\n    const [filterBeforeYear, updateFilterBeforeYear] = useState(\"\");\r\n    const [filterAfterYear, updateFilterAfterYear] = useState(\"\");\r\n    const [filterGenre, updateFilterGenre] = useState(\"\");\r\n\r\n    /**\r\n     * Called when the Filter button is clicked. Before the playResults array\r\n     * is filtered, the years are checked to ensure that they are numbers.\r\n     */\r\n    const processFilter = () => {\r\n        if ((filterBeforeYear !== \"\" && isNaN(filterBeforeYear)) ||\r\n            (filterAfterYear !== \"\" && isNaN(filterAfterYear))) {\r\n            alert(\"Please put a valid year for the year filters.\");\r\n            return;\r\n        }\r\n        props.filterPlays(filterTitle, filterBeforeYear, filterAfterYear, filterGenre);\r\n    }\r\n\r\n    /**\r\n     * all plays in the PlayList. Because of how filterPlays behaves, a blank\r\n     * string is essentially a \"no filter\" option for each field, which is why\r\n     * that's the only thing we have to pass to reset the plays.\r\n     */\r\n    const clearFilter = () => {\r\n        props.filterPlays(\"\", \"\", \"\", \"\");\r\n    }\r\n\r\n    /**\r\n     * This method is called each time a field in the Filters menu changes. It\r\n     * updates the appropriate state value based on the field that was edited.\r\n     */\r\n    const handleChange = (e) => {\r\n        if (e.currentTarget.name === \"title-filter\")\r\n            updateFilterTitle(e.currentTarget.value);\r\n        else if (e.currentTarget.name === \"before-year-filter\")\r\n            updateFilterBeforeYear(e.currentTarget.value);\r\n        else if (e.currentTarget.name === \"after-year-filter\")\r\n            updateFilterAfterYear(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"filter\">\r\n            <Form\r\n                labelCol={{\r\n                    span: 4,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 14,\r\n                }}\r\n                layout=\"horizontal\"\r\n            >\r\n                <Form.Item label=\"Title\">\r\n                    <Input name=\"title-filter\" onChange={handleChange} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Before\">\r\n                    <Input name=\"before-year-filter\" onChange={handleChange} />\r\n                </Form.Item>\r\n                <Form.Item label=\"After\">\r\n                    <Input name=\"after-year-filter\" onChange={handleChange} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Genre\">\r\n                    <Select name=\"genre-filter\" defaultValue=\"\" onChange={(value) => {\r\n                        updateFilterGenre(value);\r\n                    }}>\r\n                        <Select.Option value=\"\"></Select.Option>\r\n                        <Select.Option value=\"comedy\">Comedy</Select.Option>\r\n                        <Select.Option value=\"tragedy\">Tragedy</Select.Option>\r\n                        <Select.Option value=\"history\">History</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" class=\"filter-button\" onClick={processFilter}>Filter</Button><Button class=\"clear-filter-button\" onClick={clearFilter}>Clear</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\nexport default PlayFilter;","import React from \"react\";\r\n\r\nconst FavoriteItem = (props) => {\r\n\r\n    const handleClick = () => {\r\n        props.removePlay(props.play);\r\n    }\r\n\r\n    const handleViewClick = () => {\r\n        props.viewPlay(props.play.id);\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            <p className=\"favorite-item\">\r\n                <button className=\"remove-favorite\" onClick={handleClick}>❌</button>\r\n                <span onClick={handleViewClick}>{props.play.title} ({props.play.likelyDate})</span>\r\n            </p>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default FavoriteItem;","import React from \"react\";\r\nimport FavoriteItem from \"./FavoriteItem.js\";\r\n\r\nconst FavoriteBar = (props) => {\r\n\r\n    return (\r\n        <article>\r\n            <h2 className={props.showFavs ? \"favorites-header\" : \"favorites-header-hidden\"}>Favorites❤️</h2>\r\n            {props.favPlays.length === 0 ? <p>No favourite plays... yet</p> : props.favPlays.map(p => <FavoriteItem play={p} key={p.id} removePlay={props.removePlay} viewPlay={props.viewPlay} showFavs={props.showFavs} />)}\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default FavoriteBar;","import { Button } from 'antd';\r\nimport React from 'react';\r\n\r\nconst PlayGeneralInfo = (props) => {\r\n\r\n    const handleCloseClick = () => props.viewPlay(props.play.id);\r\n\r\n    const handleFavoriteClick = () => props.favoritePlay(props.play.id);\r\n\r\n    // on Randy's suggestion, taken from https://placeholder.com/\r\n    const src = `https://via.placeholder.com/250.png/?text=${props.play.title.replace(/\\s/g, '+')}`\r\n\r\n    return (\r\n        <div className=\"details-general\">\r\n            <img src={src} alt={props.play.title} />\r\n            <h2>{props.play.title}</h2>\r\n            <p>{props.play.synopsis}</p>\r\n            <Button type=\"primary\" size=\"large\" onClick={handleCloseClick}>Close</Button><button className=\"details-favorite-button\" onClick={handleFavoriteClick}>❤️</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayGeneralInfo;","import React from 'react';\n\nconst PlayCharacter = (props) => {\n    return (\n        <div>\n            <p>{props.character} - {props.desc}</p>\n        </div>\n    )\n}\n\nexport default PlayCharacter;","import React from 'react';\nimport Highlighter from 'react-highlight-words';\n\nconst playSpeech = (props) => {\n    return (\n        <div>\n            <h4>{props.speech.speaker}</h4>\n            {props.speech.lines.map(line => <p><Highlighter searchWords={props.searchWords} textToHighlight={line} /></p>)}\n        </div>\n    )\n}\n\nexport default playSpeech;","import React from 'react';\r\nimport PlaySpeech from './PlaySpeech';\r\n\r\nconst PlayScene = (props) => {\r\n    let speakerSpeeches = props.scene.speeches;\r\n    speakerSpeeches = speakerSpeeches.filter(speech => speech.speaker === props.speaker);\r\n    if (props.speaker === \"allPlayers\") {\r\n        return (\r\n            <div>\r\n                <h3>{props.scene.name}</h3>\r\n                <hr />\r\n                <p>{props.scene.title}</p>\r\n                <p><em>{props.scene.stageDirection}</em></p>\r\n                {props.scene.speeches.map(sp => <PlaySpeech speech={sp} searchWords={props.searchWords} />)}\r\n            </div>\r\n        )\r\n    } else if (speakerSpeeches.length === 0) {\r\n        return (\r\n            <div>\r\n                <p>No text found for <em>{props.speaker}.</em></p>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <h3>{props.scene.name}</h3>\r\n                <hr />\r\n                <p>{props.scene.title}</p>\r\n                <p><em>{props.scene.stageDirection}</em></p>\r\n                {speakerSpeeches.map(sp => <PlaySpeech speech={sp} searchWords={props.searchWords} />)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayScene;","import React from 'react';\r\nimport PlayScene from './PlayScene';\r\n\r\nconst PlayAct = (props) => {\r\n    if (props.scene === \"SCENE I\") {\r\n        return (\r\n            <div className=\"details-text\">\r\n                <h2>{props.act.name}</h2>\r\n                <PlayScene scene={props.act.scenes[0]} speaker={props.textSelection.char} searchWords={props.searchWords} />\r\n            </div>\r\n        )\r\n    } else if (props.scene === \"SCENE II\") {\r\n        return (\r\n            <div className=\"details-text\">\r\n                <h2>{props.act.name}</h2>\r\n                <PlayScene scene={props.act.scenes[1]} speaker={props.textSelection.char} searchWords={props.searchWords} />\r\n            </div>\r\n        )\r\n    } else if (props.scene === \"SCENE III\") {\r\n        /**\r\n         * Not every act has a third scene, so this conditional handles that situation. If the user has Scene III selected,\r\n         * and then switches to an act without a Scene III, it will default to the first scene of the newly-chosen act.\r\n         */\r\n        if (props.act.scenes[2] !== undefined) {\r\n            return (\r\n                <div className=\"details-text\">\r\n                    <h2>{props.act.name}</h2>\r\n                    <PlayScene scene={props.act.scenes[2]} speaker={props.textSelection.char} searchWords={props.searchWords} />\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"details-text\">\r\n                    <h2>{props.act.name}</h2>\r\n                    <PlayScene scene={props.act.scenes[0]} speaker={props.textSelection.char} searchWords={props.searchWords} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default PlayAct;","import React from \"react\";\r\nimport PlayAct from \"./PlayAct\";\r\n\r\nconst PlayText = (props) => {\r\n  if (props.textSelection.act === \"ACT I\")\r\n    return <PlayAct act={props.text.acts[0]} scene={props.textSelection.scene} textSelection={props.textSelection} searchWords={props.searchWords} />;\r\n  else if (props.textSelection.act === \"ACT II\")\r\n    return <PlayAct act={props.text.acts[1]} scene={props.textSelection.scene} textSelection={props.textSelection} searchWords={props.searchWords} />;\r\n  else if (props.textSelection.act === \"ACT III\")\r\n    return <PlayAct act={props.text.acts[2]} scene={props.textSelection.scene} textSelection={props.textSelection} searchWords={props.searchWords} />;\r\n};\r\n\r\nexport default PlayText;\r\n","// Taken from https://www.digitalocean.com/community/tutorials/react-tabs-component\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Tab extends Component {\n\n    static propTypes = {\n        activeTab: PropTypes.string.isRequired,\n        label: PropTypes.string.isRequired,\n        onClick: PropTypes.func.isRequired,\n    };\n\n    onClick = () => {\n        if (this.props.label.length > 0) {\n            const { label, onClick } = this.props;\n            onClick(label);\n        }\n        if (this.props.label.toLowerCase() === \"text\") {\n            this.props.setTextTabSelected(true);\n        } else {\n            this.props.setTextTabSelected(false);\n        }\n    }\n\n    render() {\n        const {\n            onClick,\n            props: {\n                activeTab,\n                label,\n            },\n        } = this;\n\n        let className = 'tab-list-item';\n\n        if (activeTab === label) {\n            className += ' tab-list-active';\n        }\n\n        return (\n            <li\n                className={className}\n                onClick={onClick}\n            >\n                {label}\n            </li>\n        );\n    }\n}\n\nexport default Tab;","// Taken from https://www.digitalocean.com/community/tutorials/react-tabs-component\nimport React, { Component, setState } from 'react';\nimport PropTypes from 'prop-types';\nimport Tab from './Tab';\n\nclass Tabs extends Component {\n    static propTypes = {\n        children: PropTypes.instanceOf(Array).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: this.props.children[0].props.label,\n        };\n    }\n\n    onClickTabItem = (tab) => {\n        this.setState({ activeTab: tab });\n    }\n\n    render() {\n        const {\n            onClickTabItem,\n            props: {\n                children,\n            },\n            state: {\n                activeTab,\n            }\n        } = this;\n\n        return (\n            <div className=\"tabs\">\n                <ol className=\"tab-list\">\n                    {children.map((child) => {\n                        const { label } = child.props;\n\n                        return (\n                            <Tab\n                                setTextTabSelected={this.props.setTextTabSelected}\n                                activeTab={activeTab}\n                                key={label}\n                                label={label}\n                                onClick={onClickTabItem}\n                            />\n                        );\n                    })}\n                </ol>\n                <div className=\"tab-content\">\n                    {children.map((child) => {\n                        if (child.props.label !== activeTab) return undefined;\n                        return child.props.children;\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Tabs;","import React from 'react';\r\nimport PlayCharacter from './PlayCharacter';\r\nimport PlayText from './PlayText';\r\nimport Tabs from \"./Tabs\";\r\n\r\nconst PlayDetailTabs = (props) => {\r\n\r\n    return (\r\n        <div className=\"details-tabs\">\r\n            {props.hasPlayInfo ? // to display character and text tabs\r\n                <Tabs setTextTabSelected={props.setTextTabSelected} >\r\n                    <div label=\"Details\">\r\n                        <p><strong>Likely date of composition:</strong> {props.play.likelyDate}</p>\r\n                        <p><strong>Genre:</strong> {props.play.genre}</p>\r\n                        <p><a href={props.play.wiki}>Wiki</a> - <a href={props.play.gutenberg}>Gutenberg</a> - <a href={props.play.shakespeareOrg}>Shakespeare.org</a></p>\r\n                        <p><strong>Description:</strong> {props.play.desc}</p>\r\n                    </div>\r\n                    <div label=\"Characters\">\r\n                        {props.playInfo.playText.persona.map(c => <PlayCharacter character={c.player} desc={c.desc} key={c.player} />)}\r\n                    </div>\r\n                    <div label=\"Text\">\r\n                        {<PlayText text={props.playInfo.playText} textSelection={props.textSelection} searchWords={props.searchWords} />}\r\n                    </div>\r\n                </Tabs>\r\n                : // to only display details tab\r\n                <Tabs setTextTabSelected={props.setTextTabSelected}>\r\n                    <div label=\"Details\">\r\n                        <p><strong>Likely date of composition:</strong> {props.play.likelyDate}</p>\r\n                        <p><strong>Genre:</strong> {props.play.genre}</p>\r\n                        <p><a href={props.play.wiki}>Wiki</a> - <a href={props.play.gutenberg}>Gutenberg</a> - <a href={props.play.shakespeareOrg}>Shakespeare.org</a></p>\r\n                        <p><strong>Description:</strong> {props.play.desc}</p>\r\n                    </div>\r\n                    <div label=\"\"></div>{/* an empty tab is the only thing between me and my forever-sleep*/}\r\n                </Tabs>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayDetailTabs;","import React from 'react';\r\nimport * as cloneDeep from 'lodash/cloneDeep';\r\nimport { Button } from 'antd';\r\n\r\nconst PlayTextSearch = (props) => {\r\n\r\n    const handleCloseClick = () => props.viewPlay(props.play.id);\r\n\r\n    const handleFavoriteClick = () => props.favoritePlay(props.play.id);\r\n\r\n    // on Randy's suggestion, taken from https://placeholder.com/\r\n    const src = `https://via.placeholder.com/250.png/?text=${props.play.title.replace(/\\s/g, '+')}`\r\n\r\n    const handleOnChange = (e) => {\r\n        const currSelection = cloneDeep(props.textSelection);\r\n        if (e.target.name === \"act\") {\r\n            currSelection.act = e.target.value;\r\n        } else if (e.target.name === \"scene\") {\r\n            currSelection.scene = e.target.value;\r\n        } else if (e.target.name === \"char\") {\r\n            currSelection.char = e.target.value;\r\n        } else {\r\n            console.log(\"didn't change act, scene, or character\")\r\n        }\r\n        props.setTextSelection(currSelection);\r\n    }\r\n\r\n    const handleSearch = (e) => {\r\n        props.setSearchWords(e.target.value.split(\" \"));\r\n    }\r\n\r\n    return (\r\n        <div className=\"details-general\">\r\n            <img src={src} alt={props.play.title} />\r\n            <h2>{props.play.title}</h2>\r\n            <label for=\"act\">Act</label>\r\n            <select name=\"act\" id=\"act\" className=\"details-search-option\" onChange={handleOnChange}>\r\n                {props.playInfo.playText.acts.map(act => <option value={act.name}>{act.name}</option>)}\r\n            </select>\r\n            <br />\r\n            <label for=\"scene\">Scene</label>\r\n            <select name=\"scene\" id=\"scene\" className=\"details-search-option\" onChange={handleOnChange}>\r\n                {props.playInfo.playText.acts.find(act => act.name === props.textSelection.act).scenes.map(s => <option value={s.name}>{s.name}</option>)}\r\n            </select>\r\n            <br />\r\n            <div>\r\n                <label for=\"char\">Character</label>\r\n                <select name=\"char\" id=\"char\" className=\"details-search-option\" onChange={handleOnChange}>\r\n                    <option value=\"allPlayers\">ALL PLAYERS</option>\r\n                    {props.playInfo.playText.persona.map(p => <option value={p.player}>{p.player}</option>)}\r\n                </select>\r\n                <br />\r\n                <label for=\"highlight\">Highlight text</label>\r\n                <input type=\"text\" name=\"highlight\" id=\"highlight\" placeholder=\"Search\" className=\"details-search-option\" onChange={handleSearch}></input>\r\n            </div>\r\n            <br />\r\n            <Button type=\"primary\" onClick={handleCloseClick}>Close</Button><button className=\"details-favorite-button\" onClick={handleFavoriteClick}>❤️</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayTextSearch;","/**\r\n* The general data flow of the \"Play Details\" view is as follows:\r\n* 1. If the selected play has characters and text, that Play object is retrieved and set to the playInfo hook.\r\n*      - The hasPlayInfo hook is then set to \"true\"; if hasPlayInfo is false, the Characters and Text tabs will disappear.\r\n* \r\n* 2. The textSelection hook is filled with default data; that is, ACT I, SCENE I, and allPlayers.\r\n*      - textSelection is an object that contains the user's selected act, scene, and speaker, with each stored as a string.\r\n*      - Not to be confused with textTabSelected, which is an unrelated boolean stating if the user is in the \"Text\" tab.\r\n*\r\n* 3. The details for the selected play are rendered, and textSelection is passed as a prop to the PlayDetailTabs and \r\n*    PlayTextSearch components.\r\n*      - PlayDetailTabs is the component that contains the \"Details\", \"Characters\", and \"Text\" tabs. The \"Text\" tab shows the\r\n*        play's script for the currently selected act, scene, and speaker (or all speakers, if that's what's selected).\r\n*      - PlayTextSearch contains the dropdown menus to select different acts/scenes/speakers. Whenever one of these menus\r\n*        is changed, setTextSelection is called to update the new chosen act/scene/speaker, and PlayDetailTabs is re-rendered\r\n*        to reflect those changes.\r\n*\r\n* 4. When rendering the \"Text\" tab, the selected act, scene, and speaker will propogate down to each component in this order:\r\n*    PlayDetailTabs > PlayText > PlayAct > PlayScene > PlaySpeech\r\n*      - PlayDetailTabs could be considered the highest level component in this hierarchy, since it contains our playInfo and\r\n*        textSelection hooks. These hooks are passed as props to the above components so that each act, scene, and speech can\r\n*        be rendered according to the user's selection.\r\n*/\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PlayGeneralInfo from \"./PlayGeneralInfo\";\r\nimport PlayDetailTabs from \"./PlayDetailTabs\";\r\nimport PlayTextSearch from \"./PlayTextSearch\";\r\n\r\nconst PlayDetails = (props) => {\r\n  const [playInfo, setPlayInfo] = useState({});\r\n  const [hasPlayInfo, setHasPlayInfo] = useState(false);\r\n\r\n  const [textTabSelected, setTextTabSelected] = useState(false);\r\n  const [textSelection, setTextSelection] = useState({});\r\n\r\n  const [searchWords, setSearchWords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      if (!localStorage.getItem(props.play.id)) { // if not in localstorage\r\n        if (props.play.filename != \"\") { // if play has characters & text\r\n          const url = `/api/list/${props.play.id}`;\r\n          const response = await fetch(url);\r\n          const data = await response.json();\r\n          setPlayInfo(data[0]);\r\n          setTextSelection({\r\n            act: data[0].playText.acts[0].name,\r\n            scene: data[0].playText.acts[0].scenes[0].name,\r\n            char: \"allPlayers\",\r\n          });\r\n          setHasPlayInfo(true);\r\n          localStorage.setItem(props.play.id, JSON.stringify(data[0]));\r\n        }\r\n      } else {\r\n        const data = JSON.parse(localStorage.getItem(props.play.id));\r\n        setPlayInfo(data);\r\n        setTextSelection({\r\n          act: data.playText.acts[0].name,\r\n          scene: data.playText.acts[0].scenes[0].name,\r\n          char: \"allPlayers\",\r\n        });\r\n        setHasPlayInfo(true);\r\n      }\r\n    };\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"details-panel\">\r\n      {/* if open detail tab is \"text\", display textsearch instead of PlayGeneralInfo */}\r\n      {textTabSelected ? (\r\n        <PlayTextSearch\r\n          play={props.play}\r\n          playInfo={playInfo}\r\n          viewPlay={props.viewPlay}\r\n          favoritePlay={props.favoritePlay}\r\n          textSelection={textSelection}\r\n          setTextSelection={setTextSelection}\r\n          setSearchWords={setSearchWords}\r\n        />\r\n      ) : (\r\n        <PlayGeneralInfo\r\n          play={props.play}\r\n          viewPlay={props.viewPlay}\r\n          favoritePlay={props.favoritePlay}\r\n        />\r\n      )}\r\n      <PlayDetailTabs\r\n        play={props.play}\r\n        playInfo={playInfo}\r\n        hasPlayInfo={hasPlayInfo}\r\n        textSelection={textSelection}\r\n        setTextSelection={setTextSelection}\r\n        setTextTabSelected={setTextTabSelected}\r\n        searchWords={searchWords}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayDetails;","export default __webpack_public_path__ + \"static/media/logo.e66a4045.png\";","const Profile = (props) => {\r\n\r\n    const date = () => {\r\n        let d = new Date(props.currentProfile.membership.date_joined);\r\n        return d.toDateString();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img src={props.currentProfile.picture.large} alt=\"Profile picture\"/>\r\n            <p>{props.currentProfile.details.firstname + \" \" + props.currentProfile.details.lastname}</p>\r\n            <p>{props.currentProfile.details.city + \", \" + props.currentProfile.details.country}</p>\r\n            <p>Joined {date()}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport './about.css';\r\n\r\nconst About = (props) => {\r\n\r\n    return (\r\n        <div class=\"grid-container\">\r\n            <div class=\"grid-header\">\r\n                <p><b>Group Members:</b> Anthony Dang, Matthew Fudge, Nahuel Paladino</p>\r\n                <p><b>GitHub Link:</b> <a href=\"https://github.com/mfudg395/web3_asg2\">https://github.com/mfudg395/web3_asg2</a></p>\r\n            </div>\r\n            <div class=\"grid-child\">\r\n                <p><b>Packages and libraries used:</b></p>\r\n                <ul>\r\n                    <li>antd</li>\r\n                    <li>bcrypt</li>\r\n                    <li>dotenv</li>\r\n                    <li>ejs</li>\r\n                    <li>express</li>\r\n                    <li>express-flash</li>\r\n                    <li>express-session</li>\r\n                    <li>mongoose</li>\r\n                    <li>lodash</li>\r\n                    <li>passport</li>\r\n                    <li>passport-local</li>\r\n                    <li>react-highlight-words</li>\r\n                    <li>react-transition-group</li>\r\n                    <li>react-tabs-component</li>\r\n                    <li>react-router-dom</li>\r\n                </ul>\r\n            </div>\r\n            <div class=\"grid-child\">\r\n                <p><b>Third-party code and assets used:</b></p>\r\n                <ul className=\"third-party-about\">\r\n                    <li><a href=\"https://www.digitalocean.com/community/tutorials/react-tabs-component\">How to Build a Tabs Component with React</a> - for creating PlayDetails tabs</li>\r\n                    <li><a href=\"https://github.com/reactjs/react-transition-group/blob/master/Migration.md\">react-transition-group Migration Guide</a> - for creating HomeBrowser transition animation</li>\r\n                    <li><a href=\"https://www.w3schools.com/css/css_tooltip.asp\">CSS Tooltip Tutorial</a> - for creating Favorites arrow tooltip on hover</li>\r\n                    <li><a href=\"https://stackoverflow.com/questions/34582405/react-wont-load-local-images\">StackOverflow - React won't load local images</a> - for help with displaying images</li>\r\n                    <li><a href=\"https://loading.io/css/\">loading.io</a> - for loading animation</li>\r\n                    <li><a href=\"https://placeholder.com/\">placeholder.com</a> - for placeholder images on play cards</li>\r\n                    <li><a href=\"https://unsplash.com/photos/YLSwjSy7stw\">Alfons Morales, unsplash.com</a> - for hero image</li>\r\n                    <li><a href=\"https://toppng.com/free-image/experience-the-discussion-online-library-book-logo-PNG-free-PNG-Images_189362\">toppng.com</a> - for header logo</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React, { useEffect, useState } from \"react\";\r\nimport Logo from \"../assets/images/logo.png\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Drawer } from \"antd\";\r\nimport { Modal } from \"antd\";\r\n\r\nimport Profile from \"./Profile\";\r\nimport About from \"./About\";\r\n\r\nconst Header = (props) => {\r\n\r\n    const [aboutVisible, setAboutVisible] = useState(false);\r\n    const [profileVisible, setProfileVisible] = useState(false);\r\n    const [currentProfile, setCurrentProfile] = useState({});\r\n\r\n    const showModal = () => {\r\n        setAboutVisible(true);\r\n    }\r\n\r\n    const onClose = () => {\r\n        setAboutVisible(false);\r\n    }\r\n\r\n    function showDrawer() {\r\n        setProfileVisible(true);\r\n    }\r\n\r\n    function closeDrawer() {\r\n        setProfileVisible(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            try {\r\n                const url = \"currentUser\";\r\n                const response = await fetch(url);\r\n                let id = await response.json();\r\n                id = id[0].id;\r\n\r\n                const apiUrl = \"api/user/\" + id;\r\n                const apiResponse = await fetch(apiUrl);\r\n                let userData = await apiResponse.json();\r\n                setCurrentProfile(userData[0]);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n\r\n        }\r\n        getData();\r\n    }, [])\r\n\r\n    return (\r\n        <header className=\"list-view-header\">\r\n            <div className=\"flex-container flex-vertical-center\">\r\n                {/* <!-- logo source: https://toppng.com/free-image/experience-the-discussion-online-library-book-logo-PNG-free-PNG-Images_189362 --> */}\r\n                <Link to=\"/home\">\r\n                    <img src={Logo} title=\"Book Logo\" alt=\"Book Logo\" className=\"site-logo\" />\r\n                </Link>\r\n                <div className=\"header-button-container\">\r\n                    <Button className=\"profile-button\" type=\"default\" size=\"large\" onClick={showDrawer}>Profile</Button>\r\n                    <Drawer title=\"Profile\" placement=\"right\" closable={true} visible={profileVisible} onClose={closeDrawer}>\r\n                        <Profile currentProfile={currentProfile} />\r\n                    </Drawer>\r\n                    <Button className=\"about-button\" type=\"default\" size=\"large\" onClick={showModal}>About</Button>\r\n                    <Modal\r\n                        title=\"About\"\r\n                        footer={null}\r\n                        centered\r\n                        maskClosable=\"true\"\r\n                        width=\"75rem\"\r\n                        onCancel={onClose}\r\n                        visible={aboutVisible}>\r\n                        <About />\r\n                    </Modal>\r\n                    <Button className=\"logout-button\" type=\"default\" size=\"large\">\r\n                        <a href=\"/logout\">Logout</a>\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import './App.css';\r\nimport HomeBrowser from './components/HomeBrowser.js';\r\nimport PlayBrowser from './components/PlayBrowser.js';\r\nimport PlayFilter from './components/PlayFilter.js';\r\nimport FavoriteBar from './components/FavoriteBar.js';\r\nimport PlayDetails from './components/PlayDetails';\r\nimport Header from './components/Header.js';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport * as cloneDeep from 'lodash/cloneDeep';\r\nimport Modal from 'react-modal';\r\nimport { Button, Layout, Space } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { Content } from 'antd/lib/layout/layout';\r\nimport { Collapse } from 'antd';\r\n\r\nModal.setAppElement(document.querySelector(\"#root\"));\r\n\r\nfunction App() {\r\n\r\n  /**\r\n  * Array of all plays, to be kept in local storage. This hook will always store the entire array of plays\r\n  * for use in other methods. The array displayed in the play browser is the playResults hook further below.\r\n  */\r\n  const [plays, setPlays] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Fetch all plays\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        if (localStorage.getItem(\"playsList\")) {\r\n          const data = JSON.parse(localStorage.getItem(\"playsList\"));\r\n          data.sort((a, b) => a.title > b.title ? 1 : -1);\r\n          setPlays(data);\r\n          setIsLoading(false);\r\n        } else {\r\n          const url = \"api/list\";\r\n          const response = await fetch(url);\r\n          const data = await response.json();\r\n          data.sort((a, b) => a.title > b.title ? 1 : -1);\r\n          localStorage.setItem(\"playsList\", JSON.stringify(data));\r\n          setPlays(data);\r\n          setIsLoading(false);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    getData();\r\n  }, [])\r\n\r\n  // Array of plays to display in PlayBrowser.\r\n  const [playResults, setPlayResults] = useState([]);\r\n\r\n  // Create new array of plays based on search query\r\n  const searchPlays = (query) => {\r\n    if (showDetails) setShowDetails(false);\r\n    const results = plays.filter(p => p.title.toLowerCase().includes(query.toLowerCase()));\r\n    setPlayResults(results);\r\n  }\r\n\r\n  // Set PlayBrowser to display all plays\r\n  const searchAllPlays = () => {\r\n    if (showDetails) setShowDetails(false);\r\n    setPlayResults(plays);\r\n  }\r\n\r\n  /**\r\n  * Sort plays by a given field as a String - either by title or by year. The resulting plays\r\n  * is then updated with the sorted plays\r\n  */\r\n  const sortPlays = (e) => {\r\n    const playsCopy = cloneDeep(playResults);\r\n    playsCopy.sort(function (a, b) {\r\n      if (e.currentTarget.name === \"title\") return a.title > b.title ? 1 : -1;\r\n      if (e.currentTarget.name === \"year\") return a.likelyDate > b.likelyDate ? -1 : 1;\r\n    })\r\n    setPlayResults(playsCopy);\r\n  }\r\n\r\n  // Array for favorited plays\r\n  const [favoritePlays, setFavoritePlays] = useState([]);\r\n\r\n  const addFavorite = (id) => {\r\n    const copyPlays = cloneDeep(plays);\r\n\r\n    const favPlay = copyPlays.find(p => p.id === id);\r\n\r\n    if (isDuplicate(favPlay)) {\r\n      alert(\"Play already in favorites!\");\r\n    } else {\r\n      setFavoritePlays(favoritePlays.concat(favPlay));\r\n    }\r\n\r\n  }\r\n\r\n  // Helper function to check if a play being added is already in favorites\r\n  function isDuplicate(favPlay) {\r\n    let dupe = false;\r\n    favoritePlays.forEach(p => {\r\n      if (p.id === favPlay.id) {\r\n        dupe = true;\r\n      }\r\n    });\r\n    return dupe;\r\n  }\r\n\r\n  // Removes a specific play from favorites list\r\n  const removeFavorite = (play) => {\r\n    const newFavorites = [...favoritePlays];\r\n    const index = newFavorites.indexOf(play);\r\n    newFavorites.splice(index, 1);\r\n    setFavoritePlays(newFavorites);\r\n  }\r\n\r\n  const [showFavs, setShowFavs] = useState(false);\r\n\r\n  const toggleDisplay = () => setShowFavs(!showFavs);\r\n\r\n  /**\r\n   * To filter plays, makes an array of every play by copying the 'plays' hook, then applies each\r\n   * filter to copied array as necessary. Then updates state with results to display in PlayBrowser\r\n   */\r\n  const filterPlays = (title, beforeYear, afterYear, genre) => {\r\n    let playsCopy = [...plays];\r\n    playsCopy = playsCopy.filter(p => p.title.toLowerCase().includes(title.toLowerCase()));\r\n    if (beforeYear !== \"\")\r\n      playsCopy = playsCopy.filter(p => beforeYear > p.likelyDate);\r\n    if (afterYear !== \"\")\r\n      playsCopy = playsCopy.filter(p => afterYear < p.likelyDate);\r\n    if (genre !== \"\")\r\n      playsCopy = playsCopy.filter(p => genre === p.genre);\r\n    setPlayResults(playsCopy);\r\n  }\r\n\r\n  // Boolean for whether or not to display play details pane\r\n  const [showDetails, setShowDetails] = useState(false);\r\n\r\n  const toggleDetails = () => setShowDetails(!showDetails);\r\n\r\n  // ID of play open in the Play Details view\r\n  const [currentPlay, setCurrentPlay] = useState(\"\");\r\n\r\n  const viewPlay = (id) => {\r\n    toggleDetails();\r\n    setCurrentPlay(id);\r\n  }\r\n\r\n  const { Panel } = Collapse;\r\n\r\n  /**\r\n  * If still fetching from the API, display a loading animation. Otherwise, load the home browser.\r\n  * Loading animation source: https://loading.io/css/\r\n  */\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <main id=\"app-page\" >\r\n        <Route path='/' exact render={() => {\r\n          return (\r\n            <HomeBrowser searchPlays={searchPlays} searchAllPlays={searchAllPlays} />\r\n          );\r\n        }} />\r\n        <Route path='/home' exact render={() => {\r\n          return (\r\n            <HomeBrowser searchPlays={searchPlays} searchAllPlays={searchAllPlays} />\r\n          );\r\n        }} />\r\n        <Route path='/browse' exact render={() => {\r\n          return (\r\n            <Layout>\r\n              <div>\r\n                <div>\r\n                  <Header />\r\n                  <div className=\"main-container\">\r\n                    <div className=\"sidebar\">\r\n                      {!showDetails ? <div className=\"sort-container\">\r\n                        <Space size={20}>\r\n                          <h2 className=\"inline-block\">Sort by:</h2>\r\n                          <Button type=\"primary\" name=\"title\" size=\"large\" onClick={sortPlays}>Title</Button>\r\n                          <Button type=\"primary\" name=\"year\" size=\"large\" onClick={sortPlays}>Year</Button>\r\n                        </Space>\r\n                      </div> : null}\r\n                      <Collapse accordion defaultActiveKey={['1']}>\r\n                        {!showDetails ? <Panel header=\"Filters\" key=\"1\">\r\n                          <PlayFilter plays={playResults} filterPlays={filterPlays} favState={showFavs} />\r\n                        </Panel> : null}\r\n                        <Panel header=\"Favourites\" key=\"2\">\r\n                          <FavoriteBar favPlays={favoritePlays} removePlay={removeFavorite} toggleDisplay={toggleDisplay} showFavs={showFavs} viewPlay={viewPlay} />\r\n                        </Panel>\r\n                      </Collapse>\r\n                    </div>\r\n                    <Content>\r\n                      {!showDetails ? <PlayBrowser plays={playResults} sortPlays={sortPlays} favoritePlay={addFavorite} viewPlay={viewPlay} favState={showFavs} /> : null}\r\n                      {showDetails ? <PlayDetails play={plays.find(p => p.id === currentPlay)} viewPlay={viewPlay} favoritePlay={addFavorite} showFavs={showFavs} /> : null}\r\n                    </Content>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            </Layout>\r\n          );\r\n        }} />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* basename prop needed for Github Pages */}\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}